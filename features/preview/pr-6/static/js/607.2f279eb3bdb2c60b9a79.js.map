{"version":3,"file":"static/js/607.2f279eb3bdb2c60b9a79.js","mappings":"mBAEA,MAAMA,EAAS,ICOR,MACH,eAAAC,CAAgBC,GACZ,OAX8CC,EAW7BC,KAXsCC,OAWhC,EAX+CC,EAW/B,YACnCF,KAAKG,aAAe,CAChBC,YAAa,GACbC,cAAe,GACfC,WAAY,CAAC,GAEjB,MAAMC,QAAiBC,MAAM,0DAA0DV,uCAIvF,OAHIS,EAASE,KACTT,KAAKG,mBAAqBI,EAASG,QAEhCH,EAASE,EACpB,EApBG,KAFgEE,OAWpC,KATjBA,EAAIC,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKf,EAAUgB,KAAKF,GAAS,CAAE,MAAOG,GAAKL,EAAOK,EAAI,CAAE,CAC1F,SAASC,EAASJ,GAAS,IAAMC,EAAKf,EAAiB,MAAEc,GAAS,CAAE,MAAOG,GAAKL,EAAOK,EAAI,CAAE,CAC7F,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBL,EAAIK,EAAQ,IAAIL,GAAE,SAAUE,GAAWA,EAAQG,EAAQ,KAIjBO,KAAKR,EAAWK,EAAW,CAC7GH,GAAMf,EAAYA,EAAUsB,MAAMzB,EAASE,GAAc,KAAKiB,OAClE,IAPwC,IAAUnB,EAASE,EAAYU,EAAGT,CAuB1E,CACA,GAAAuB,CAAIC,GACA,MAAMC,EAAU,CACZC,WAAW,EACXC,QAAS,IAEb,QAA0BC,IAAtB9B,KAAKG,aACL,MAAM,IAAI4B,MAAM,0CAEpB,MAAMzB,EAAaN,KAAKG,aAAaG,WACrC,IAAK,MAAM0B,KAAa1B,EACpB,IAAK,MAAM2B,KAAQ3B,EAAW0B,GAAY,CACtC,GAAIL,EAAQE,QAAQK,QAAU,GAAI,CAC9BP,EAAQC,WAAY,EACpB,KACJ,CACA,MAAMO,EAAiBnC,KAAKG,aAAaE,cAAc+B,OAAOC,SAASL,IAClEM,QAAQ,WAAY,IACpBA,QAAQ,MAAO,MACdC,EAAYJ,EAAiB,KAAOF,EAAKO,KAC/C,IAAIC,GAAM,EACV,IACIA,EAAM,IAAIC,OAAOhB,EAAO,KAAKiB,KAAKJ,EACtC,CACA,MAAOK,GACHH,EAAMF,EAAUM,SAASnB,EAC7B,CACA,GAAIe,EAAK,CACL,IAAIK,EAAWb,EAAKa,SAASC,KAAKC,GAAQhD,KAAKG,aAAaC,YAAY4C,KACxEF,EAAWA,EAASG,QAAQC,GAAY,eAANA,GAA4B,qBAANA,IACxDvB,EAAQE,QAAQsB,KAAK,CACjBX,KAAMP,EAAKO,KACXR,UAAWG,EACXW,SAAUA,GAElB,CACJ,CAEJ,OAAOnB,CACX,GD3DJyB,KAAKC,UAAaC,IAEd,OADYA,EAAGC,KACHf,MACR,IAAK,aAAc,CACf,MAAMgB,EAAcF,EAAGC,KACvB3D,EAAOC,gBAAgB2D,EAAY1D,QAAQyB,MAAKF,IAC5CoC,YAAY,CACRjB,KAAM,mBACNnB,OAAQA,GACV,IAEN,KACJ,CACA,QAAS,CACL,MAAMqC,EAAgBJ,EAAGC,KACnB5B,EAAU/B,EAAO6B,IAAIiC,EAAchC,OACzC+B,YAAY,CACRjB,KAAM,eACNX,QAASF,EAAQE,QACjBD,UAAWD,EAAQC,WAE3B,EACJ,C","sources":["webpack://windows-rs.web.features/./src/worker/worker.ts","webpack://windows-rs.web.features/./src/worker/search.ts"],"sourcesContent":["/// <reference lib=\"webworker\" />\nimport { Search } from './search';\nconst search = new Search();\nself.onmessage = (ev) => {\n    const msg = ev.data;\n    switch (msg.name) {\n        case 'initialize': {\n            const initMessage = ev.data;\n            search.InitializeAsync(initMessage.branch).then(result => {\n                postMessage({\n                    name: 'initializeResult',\n                    result: result,\n                });\n            });\n            break;\n        }\n        default: {\n            const searchMessage = ev.data;\n            const summary = search.For(searchMessage.query);\n            postMessage({\n                name: 'searchResult',\n                results: summary.results,\n                truncated: summary.truncated,\n            });\n        }\n    }\n};\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport class Search {\n    InitializeAsync(branch) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._searchIndex = {\n                feature_map: [],\n                namespace_map: [],\n                namespaces: {},\n            };\n            const response = yield fetch(`https://raw.githubusercontent.com/microsoft/windows-rs/${branch}/crates/libs/windows/features.json`);\n            if (response.ok) {\n                this._searchIndex = yield response.json();\n            }\n            return response.ok;\n        });\n    }\n    For(query) {\n        const summary = {\n            truncated: false,\n            results: [],\n        };\n        if (this._searchIndex === undefined) {\n            throw new Error('Search index has not been initialized.');\n        }\n        const namespaces = this._searchIndex.namespaces;\n        for (const namespace in namespaces) {\n            for (const item of namespaces[namespace]) {\n                if (summary.results.length >= 50) {\n                    summary.truncated = true;\n                    break;\n                }\n                const full_namespace = this._searchIndex.namespace_map[Number.parseInt(namespace)]\n                    .replace('Windows.', '')\n                    .replace(/\\./g, '::');\n                const full_name = full_namespace + '::' + item.name;\n                let hit = false;\n                try {\n                    hit = new RegExp(query, 'i').test(full_name);\n                }\n                catch (_a) {\n                    hit = full_name.includes(query);\n                }\n                if (hit) {\n                    let features = item.features.map((idx) => this._searchIndex.feature_map[idx]);\n                    features = features.filter((f) => f !== 'Foundation' && f !== 'Win32_Foundation');\n                    summary.results.push({\n                        name: item.name,\n                        namespace: full_namespace,\n                        features: features,\n                    });\n                }\n            }\n        }\n        return summary;\n    }\n}\n"],"names":["search","InitializeAsync","branch","thisArg","this","_arguments","generator","_searchIndex","feature_map","namespace_map","namespaces","response","fetch","ok","json","P","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","For","query","summary","truncated","results","undefined","Error","namespace","item","length","full_namespace","Number","parseInt","replace","full_name","name","hit","RegExp","test","_a","includes","features","map","idx","filter","f","push","self","onmessage","ev","data","initMessage","postMessage","searchMessage"],"sourceRoot":""}