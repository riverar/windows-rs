(()=>{"use strict";const e=new class{InitializeAsync(e){return t=this,n=void 0,a=function*(){this._searchIndex={feature_map:[],namespace_map:[],namespaces:{}};const t=yield fetch(`https://raw.githubusercontent.com/microsoft/windows-rs/${e}/crates/libs/windows/features.json`);return t.ok&&(this._searchIndex=yield t.json()),t.ok},new((s=void 0)||(s=Promise))((function(e,r){function i(e){try{o(a.next(e))}catch(e){r(e)}}function c(e){try{o(a.throw(e))}catch(e){r(e)}}function o(t){var n;t.done?e(t.value):(n=t.value,n instanceof s?n:new s((function(e){e(n)}))).then(i,c)}o((a=a.apply(t,n||[])).next())}));var t,n,s,a}For(e){const t={truncated:!1,results:[]};if(void 0===this._searchIndex)throw new Error("Search index has not been initialized.");const n=this._searchIndex.namespaces;for(const s in n)for(const a of n[s]){if(t.results.length>=50){t.truncated=!0;break}const n=this._searchIndex.namespace_map[Number.parseInt(s)].replace("Windows.","").replace(/\./g,"::"),r=n+"::"+a.name;let i=!1;try{i=new RegExp(e,"i").test(r)}catch(t){i=r.includes(e)}if(i){let e=a.features.map((e=>this._searchIndex.feature_map[e]));e=e.filter((e=>"Foundation"!==e&&"Win32_Foundation"!==e)),t.results.push({name:a.name,namespace:n,features:e})}}return t}};self.onmessage=t=>{switch(t.data.name){case"initialize":{const n=t.data;e.InitializeAsync(n.branch).then((e=>{postMessage({name:"initializeResult",result:e})}));break}default:{const n=t.data,s=e.For(n.query);postMessage({name:"searchResult",results:s.results,truncated:s.truncated})}}}})();
//# sourceMappingURL=607.2f279eb3bdb2c60b9a79.js.map